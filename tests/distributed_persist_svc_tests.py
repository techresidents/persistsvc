
import datetime
import logging
import os
import sys
import time
import unittest

SERVICE_NAME = "persistsvc"
#Add SERVICE_ROOT to python path, for imports.
SERVICE_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "../", SERVICE_NAME))
sys.path.insert(0, SERVICE_ROOT)


from trpycore.timezone import tz
from trsvcscore.db.models import Chat, ChatPersistJob, ChatSession, ChatMessage, ChatMinute, ChatSpeakingMarker, ChatTag, \
    Topic

from chat_test_data import ChatTestDataBuilder, ChatTestDataSets
from testbase import DistributedTestCase





class DistributedPersistServiceTest(DistributedTestCase):
    """
        Run multiple instances of the PersistService simultaneously
        and ensure operation is correct.
    """

    @classmethod
    def setUpClass(cls):
        DistributedTestCase.setUpClass()


        chat_datasets = ChatTestDataSets()
        chat_data_list = chat_datasets.get_list()
        chat_data = chat_data_list[0]
        print '*****************************'
        print chat_data.chat_session_token # TODO why a tuple?
        print '*****************************'



        # Need to create the data objs that persist job requires
        #   1) Need to write ChatPersistJobs
        #   2) Need to write ChatMessages


        # Generate chat persist job data
        #
        # Match the topic structure of the test chat data
        # that was used above to generate chat messages.
        cls.root_topic = Topic(
            parent_id=None,
            rank=0,
            title="DistributedTestChat",
            description="Chat topic used to test the persist service",
            duration=30,
            public=True,
            user_id=1,
            type_id=1
        )
        cls.topic1 = Topic(
            rank=1,
            title="t1",
            description="t1 description",
            duration=10,
            public=True,
            user_id=1,
            type_id=1
        )
        cls.root_topic.children.append(cls.topic1)

        cls.chat = Chat(
            type_id=1,
            topic=cls.root_topic,
            start=tz.utcnow(),
            end=tz.utcnow()+datetime.timedelta(minutes=5))



        # Can have as many chat_sessions and jobs as I want
        cls.chat_session_token = 'test1_dummy_token'


        cls.chat_session = ChatSession(
            chat=cls.chat,
            token=cls.chat_session_token,
            participants=1)

        cls.chat_persist_job = ChatPersistJob(
            chat_session=cls.chat_session,
            created=tz.utcnow()
        )

        try:
            # Write ChatPersistJob data to the db
            db_session = cls.service.handler.get_database_session()
            db_session.add(cls.chat_session)
            db_session.add(cls.chat)
            db_session.add(cls.root_topic)
            db_session.add(cls.chat_persist_job)
            db_session.commit()

            # Generate chat message data
            # Note the commit() above is required since we need
            # real IDs to build and persist ChatMessages.
            builder = ChatTestDataBuilder()
            chat_data = builder.build(
                root_topic_id=cls.root_topic.id,
                topic1_id=cls.topic1.id,
                chat_session_id=cls.chat_session.id,
                chat_session_token=cls.chat_session_token,
                user_id=1
            )

            # Write ChatMessages to the db for consumption by the persist svc
            cls.chat_messages = chat_data.serialized_message_list
            for chat_message in cls.chat_messages:
                db_session.add(chat_message)
            db_session.commit()

        except Exception as e:
            logging.exception(e)
        finally:
            db_session.close()




    @classmethod
    def tearDownClass(cls):
        DistributedTestCase.tearDownClass()

        try:
            # Remove chat data from db
            db_session = cls.service.handler.get_database_session()

            # Delete data generated by persist service
            chat_session = db_session.query(ChatSession).\
                filter_by(token=cls.chat_session_token).\
                one()
            chat_minutes = db_session.query(ChatMinute).\
                filter_by(chat_session_id=chat_session.id).\
                all()
            for minute in chat_minutes:
                # Delete Tags
                tags = db_session.query(ChatTag).\
                    filter_by(chat_minute_id=minute.id).\
                    all()
                for tag in tags:
                    db_session.delete(tag)
                # Delete Markers
                markers = db_session.query(ChatSpeakingMarker).\
                    filter_by(chat_minute_id=minute.id).\
                    all()
                for marker in markers:
                    db_session.delete(marker)
                # Delete the Minute after all refs to it are deleted
                db_session.delete(minute)


            # Delete data generated by Setup()
            db_session.delete(cls.chat_persist_job)
            db_session.delete(chat_session)
            db_session.delete(cls.chat)
            db_session.delete(cls.root_topic)
            db_session.delete(cls.topic1)
            for chat_message in cls.chat_messages:
                db_session.delete(chat_message)

            db_session.commit()

        except Exception as e:
            logging.exception(e)
        finally:
            db_session.close()



    def test_multipleServicesRunning(self):

        # Setup() will have started two instances of the persist service.
        # Services poll at 60 second intervals.
        # Sleep 90 secs to ensure that the unprocessed jobs written
        # during setup() will have been processed.
        time.sleep(70) #TODO reference settings poll time

        # Read back data written to db.
        pass




if __name__ == '__main__':
    unittest.main()



